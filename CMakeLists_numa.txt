cmake_minimum_required(VERSION 3.10)
project(SPM_project)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Set the build type
set(CMAKE_BUILD_TYPE Release)
#set(CMAKE_BUILD_TYPE Debug)

# Define options
option(ENABLE_BENCHMARK "Enable times benchmarking" OFF)

# Set the flags for different build types
set(CMAKE_CXX_FLAGS "-O3 -pg -pthread")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -Wall -ftree-vectorize -fopt-info-vec")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -pthread -fopenmp -DNDEBUG")

# Add preprocessor definitions based on options
if(ENABLE_BENCHMARK)
    add_compile_definitions(BENCHMARK)
endif()

# Determine FF_ROOT
set(FF_ROOT "$ENV{FF_ROOT}")
if(NOT FF_ROOT)
    set(FF_ROOT "$ENV{HOME}/include/fastflow")
endif()

# Source files for targets
set(SEQ_SOURCES src/sequential_wf.cpp)
set(FFF_SOURCES src/ff_farm_wf.cpp)
set(FFP_SOURCES src/ff_parallel_wf.cpp)
set(FFPT_SOURCES src/ff_parallel_wf_T.cpp)
# set(MPI_SOURCES src/mpi_wf.cpp)

# Add executables without target_include_directories
add_executable(sequential_wf ${SEQ_SOURCES})
add_executable(ff_farm_wf ${FFF_SOURCES})
add_executable(ff_parallel_wf ${FFP_SOURCES})
add_executable(ff_parallel_wf_T ${FFPT_SOURCES})
# add_executable(mpi_wf ${MPI_SOURCES})

# Add include directories
target_include_directories(ff_farm_wf PRIVATE ${FF_ROOT} include)
target_include_directories(ff_parallel_wf PRIVATE ${FF_ROOT} include)
target_include_directories(ff_parallel_wf_T PRIVATE ${FF_ROOT} include)

# Link MPI
# find_package(MPI REQUIRED)
# target_include_directories(mpi_wf PRIVATE ${MPI_CXX_INCLUDE_PATH})
# target_link_libraries(mpi_wf ${MPI_CXX_LIBRARIES})